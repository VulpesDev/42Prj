struct rules
{
	num_philo;
	num_forks;
	time_die;
	time_eat;
	time_sleep;
	times_eat;
}

struct philo
{
	philo id;
	left_fork;
	right_fork;
	hunger;
	times ate;
}

monitoring

check if hunger is 0 or less
check if philos ate times

func think
{
	message(timestamp_ms(), philo, "is thinking\n");
}

func eat
{
	mutex_lock(left_fork)
	message(timestamp_ms(), philo, "has taken a fork\n");
	mutex_lock(right_fork)
	message(timestamp_ms(), philo, "has taken a fork\n");
	philo.hunger = rules.eat_die;
	if(ft_sleep(rules.eat_time))
		return ;
	mutex_unlock(left_fork);
	mutex_unlock(right_fork);
}

func sleep
{
	message(timestamp_ms(), philo, "is sleeping\n");
	if(ft_sleep(rules.sleep_time))
		return ;
}